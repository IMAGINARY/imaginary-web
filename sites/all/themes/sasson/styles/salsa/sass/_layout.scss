// ---------------------------------------------------------------------------
// Salsa Layout - This is where the real magic happens

// ---------------------------------------------------------------------------
// Micro clearfix hack
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clear {
  &:before, &:after {
    content: "\0020";
    display: table;
  }
  &:after { clear: both; }
  @if $ie7-support {
    & { zoom: 1; }
  }
}

// ---------------------------------------------------------------------------
// Box sizing

// Apply this where you want your elements to contain their padding and borders,
// this allows salsa to minimize browsers rounding errors and to use pixels or 
// even em gutters and not be bound to %.
// Paul Irish wrote about it here - http://paulirish.com/2012/box-sizing-border-box-ftw/
@mixin box-sizing($model: border-box) {
  -moz-box-sizing: $model;
  -webkit-box-sizing: $model;
  box-sizing: $model;
}

// ---------------------------------------------------------------------------
// Containers

// Apply container to your outer-most container element.
@mixin container {
  width: $container-width;
  margin: {
    left: auto;
    right: auto;
  }
  @include clear;
}

// Nested Container
// Apply nested-container to any grid element that contains other grid elements
// as a nested grid container.
@mixin nested-container {
  padding: {
    left: 0;
    right: 0;
  }
  @include clear;
}

// ---------------------------------------------------------------------------
// Grid Rows
// Apply row to any grid element that should force a new grid row
@mixin row {
  clear: $flow;
}

// Apply unrow to cancel the previous mixin's effect, e.g. when changing layouts
// using media queries.
@mixin unrow {
  clear: none;
}

// ---------------------------------------------------------------------------
// Grid Elements

// Apply grid-cell to only set the grid element box-model (padding) but not
// positioning it, the element will simply flow in its natural position in the
// document. see the next mixin for positioned grid-elements.
@mixin grid-cell($container: false) {
  @include box-sizing;
  @if $container == false {
    padding: {
      left: $gutter-width / 2;
      right: $gutter-width / 2;
    }
  }
  @if $box-sizing-polyfill-path != "" and $ie7-support {
    behavior: url($box-sizing-polyfill-path);
  }
}

// grid(<$width> [<container>], [<$position>])
// 
// grid() is the heart of the layout system, it allows you to define 
// grid-element's width and position.
// 
// $width: 
//    - Can be unitless and represent the number of columns to span.
//    - May have any kind of width unit (e.g. px, em, % etc.) and provide 
//      complete control over the element's with, even if not complying with
//      the grid layout or if using a grid is not your cup of tea. 
// $position:
//    - Can be unitless and represent the column number the element starts on
//    - May have any kind of width unit (e.g. px, em, % etc.) and provide 
//      complete control over the element's position, similar to absolute
//      positioning only that elements are NOT removed from the normal flow.
//    - May be 'row' to force a new grid row
//    
// Examples:
//    - Simple grid element spanning 4 columns starting from the 12th column
//        
//        @include grid(4, 12);
//        
//    - a 40% wide element pushed 60% off the grid's first column
// 
//        @include grid(40%, 60%);
//        
// Nested grids -
//    - You may provide $width as a simple fraction, so if you want an element
//      to span 3 columns inside a 6 columns (nested) grid container, you'll
//      probably use 3/6 as $width.
//    - $position too.
//    - note: 6/6 = 1 column, not 6 columns out of 6, use 100% instead.
//    
//    Example: 2 column grid element nested inside a 6 columns nested-container,
//             starting from the 4th column.
//    
//             @include grid(2/6, 4/6);
//
@mixin grid($width, $position: false) {
  @if length($width) > 1 and nth($width, 2) == container{
    @include grid-cell(container);
  }
  @else {
    @include grid-cell;
  }
  $width: nth($width, 1);

  float: $flow;

  // Width (fraction/columns/units)
  @if round($width) != $width { // fraction
    width: 100% * $width;
  }
  @else if unitless($width) { // columns
    width: 100% / $columns * $width;
  }
  @else { // unit (px/%/em etc.)
    width: $width;
  }

  // Position (row/fraction/columns/units)
  @if $position == row { // row
    @include row;
  }
  @else if $position {
    margin: {
      #{$opos}: -100%;
      @if round($position) != $position { // fraction
        #{$flow}: $position * 100%;
      }
      @else if unitless($position) { // columns
        #{$flow}: $position * 100% / $columns;
      }
      @else { // unit (px/%/em etc.)
        #{$flow}: $position;        
      }
    }
  }
}
