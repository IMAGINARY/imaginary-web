-# Haml version of the Yii Index Page
-#
  Copy this file to application.views.site
  Enable the Haml view renderer in your config file by configuring it as
  an application component named "viewRenderer" in the application configuration:
  array(
    'components'=>array(
      ......
      'viewRenderer'=>array(
        'class'=>'HamlViewRenderer',
        .... options ....
      ),
    ),
  )
  A good option is 'ugly'=>false to get nicely formatted XHTML
- $this->pageTitle=Yii::app()->name
%h1
  Welcome, #(Yii::app()->user->name)!
%p
  This is the homepage of
    %em= Yii::app()->name
  . You may modify the following files to customize the content of this page:
%dl
  %dt= Yii::app()->controllerPath . DIRECTORY_SEPARATOR . 'SiteController.php'
  %dd
    This file contains the
    %tt SiteController
    class which is the default application controller. Its default
    %tt index
    action renders the content of the following two files:
    %dl
      %dt= __FILE__
      %dd This is the view file that contains the body content of this page.
      %dt= Yii::app()->layoutPath . DIRECTORY_SEPARATOR . 'main.php'
      %dd
        This is the layout file that contains common presentation (such as header,
        footer)  shared by all view files.
%h3 What's Next
%ul
  %li
    Implement new actions in
    %tt SiteController,
    and create corresponding views under #(Yii::app()->viewPath . DIRECTORY_SEPARATOR . 'site')
  %li
    Create new controllers and actions manually or using the
    %tt yiic
    tool.
  %li  If your Web application should be driven by database, do the following:
    %ul
      %li
        Set up a database connection by configuring the
        %code db
        component in the application configuration
        %tt= Yii::app()->basePath . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR .'main.php'
      %li
        Create model classes under the directory
        %tt= Yii::app()->basePath . DIRECTORY_SEPARATOR . 'models'
      %li
        Implement CRUD operations for each model. For example, for the
        %tt Post
        model class, you would create a
        %tt PostController
        class together with
        %tt create,
        %tt read,
        %tt update
        and
        %tt delete
        actions.
    Note that the
      %tt yiic
      tool can automate the task of creating model classes and CRUD operations.
%p
  If you have problems in accomplishing any of the above tasks, please read
  %a(href="http://www.yiiframework.com/doc/")
    Yii documentation
  or visit
  %a(href="http://www.yiiframework.com/forum/")
    Yii forum
  for help.