<?php
// $id:

/**
 * @file
 * 
 * public file download count module (for Drupal's public file system)
 *
 * @ingroup pubdlcnt
 *
 * Copyright 2009-2011 Hideki Ito <hide@pixture.com> Pixture Inc. All rights reserved.
 */

define("MODE_TOTAL",   0);
define("MODE_DETAIL",  1);
define("MODE_CONFIRM", 2);
define("MODE_RESET",   3);

function pubdlcnt_debug_log($str)
{
  if(is_array($str) || is_object($str)) {
    error_log(print_r($str, TRUE) . "\r\n", 3, "/tmp/debug.txt");
  }
  else {
    error_log($str . "\r\n", 3, "/tmp/debug.txt");
  }
}

/**
 * API for external modules and themes
 */
function pubdlcnt_filter($text, $nid) {
  // return if $nid is not specified
  if (!$nid) return $text;

  return _filter_pubdlcnt($text, $nid);
}

/**
 * Parse whole node data and filter valid anchor tags
 */
function _filter_pubdlcnt($text, $nid) {
  // return if $nid is not specified
  if (!$nid) return $text;
 
  // 1. cross-platform line breaks to UNIX line breaks
  $text = str_replace(array("\r\n", "\r"), "\n", $text);

  // 2. convert anchor tag
  $text = preg_replace('/(<a.*?>)(.*?)(<\/a>)/ise', "_pubdlcnt_replace_anchor_url('$0', '$1', '$2', '$3', $nid)", $text);

  return $text;
}

/**
 * Convert one anchor tag
 *
 * Following types of anchor tags are excluded from this conversion
 *  1. URL without file name           - http://server/dir1/dir2/
 *  2. URL without file name extension - http://server/dir/filename
 *  3. URL with query string           - http://server/dir/program?arg1=XXX&arg2=YYY
 *  4. URL with file name + invalid extension
 *  5. URL wilth private file system path - http://server/system/files/dir/filename
 *
 * So, only the URLs with file name with valid extension can be processed.
 *
 *  -- case 1: absolute URL --
 *  IN:  <a href="http://server/dir1/dir2/sample.zip" title="sample">Sample</a>
 *  OUT: <a href="http://drupalserver/path/pubdlcnt.php?file=http://server/dir1/dir2/sample.zip" title="sample">Sample</a>
 *
 *  -- case 2: relative URL (based on DocumentRoot) --
 *  IN:  <a href="/dir1/dir2/sample.zip" title="sample">Sample</a>
 *  OUT: <a href="http://drupalserver/path/pubdlcnt.php?file=/dir1/dir2/sample.zip" title="sample">Sample</a>
 */
function _pubdlcnt_replace_anchor_url($all, $str1, $str2, $str3, $nid) {

  // Example: <a href=\"http://www.pixture.com/files/sample.zip\" title=\"Sample\">sample.zip</a>
  // $all:  entire string
  // $str1: start anchor tag:  <a href=\"www.pixutre.com/files ... \"title=\"Sample\">
  // $str2: inbetween content: sample.zip
  // $str3: end anchor tag:    </a>

  global $user;
  $save_history = variable_get('pubdlcnt_save_history', 1);

  // remove backslash before the double-quote
  $all   = str_replace('\"','"',$all);
  $str1  = str_replace('\"','"',$str1); 
  $str2  = str_replace('\"','"',$str2); 
  $str3  = str_replace('\"','"',$str3); 

  // if (preg_match('/\s*?rel=["\']lightbox.*["\']/i', $str1)) {
  if (preg_match('/\s*?rel=["\'](lightbox|thickbox|shadowbox).*["\']/i', $str1)) {
    // skip lightbox handled image file anchor tag
    return $all;
    // the line below disables lightbox and enable pubdlcnt
    // $str1 = preg_replace('/\s*?rel=["\'](lightbox|thickbox|shadowbox).*["\']/i', '', $str1);
  }

  preg_match('/(<a.*?href=["\'])(.*?)(["\'].*?>)/ise', $str1, $matches);
  // Example: <a href=\"http://www.pixture.com/files/sample.zip\" title=\"Sample\">
  // $matches[0]: entire str1
  // $matches[1]: first part of anchor: <a href=\"
  // $matches[2]: href content(URL)   : http://www.pixture.com/files/sample.zip
  // $matches[3]: remainign part:       \" title=\"Sample\">

  if(!isset($matches[2])) {
    return $all;   // e.g: <a id="XXXX"></a>
  }

  // extract file name and file extension from the URL
  $path = explode("?", $matches[2]);
  if (isset($path[1])) {
    // URL has query string -- skip conversion
    return $all;
  }
  if (preg_match('/\/$/', $matches[2])) {
    // URL does not has file name (URL end with /)
    return $all;
  }
  if (strstr($matches[2], "/system/files")) {
    // anchor to a file under private file system
    return $all;
  }

  $filename = basename($matches[2]);

  $extension = explode(".", $filename);
  $num = count($extension);
  if ($num > 1) {
    $ext = $extension[$num-1];
  }
  else {
    // No extension
    return $all;
  }

  $valid_extensions = variable_get('pubdlcnt_valid_extensions', '7z bz bz2 gz gzip hqx iso lha lzh pkg pdf rpm sea sit tar tbz tgz zip');

  // check if the extension is a valid extension or not (case insensitive)
  $s_valid_extensions = strtolower($valid_extensions);
  $s_ext = strtolower($ext);
  $s_valid_ext_array = explode(" ", $s_valid_extensions);
  if (!in_array($s_ext, $s_valid_ext_array)) {
    return $all;
  }
  
  // show total download count in nodes
  if (user_access('view total download count in nodes')) {
    if (user_access('administer public download count')) {
      // total count with link to statistics page
      $cnt = pubdlcnt_get_total_counter($filename);
      if ($save_history) {
        $path = base_path() . _pubdlcnt_language_prefix() 
            . 'admin/reports/pubdlcnt/counter/' . $filename;
      }
      else {
        $path = base_path() . _pubdlcnt_language_prefix() 
            . 'admin/reports/pubdlcnt/counter';
      }
      $str3 .= theme('pubdlcnt_counter', array('type' => 'node', 'value' => $cnt, 'path' => $path));
    }
    else { // non admin
      // total count only (no link)
      $cnt = pubdlcnt_get_total_counter($filename);
      $str3 .= theme('pubdlcnt_counter', array('type' => 'node', 'value' => $cnt, 'path' => NULL));
    }
  }
  $matches[2] = base_path() . drupal_get_path('module', 'pubdlcnt') .
          "/pubdlcnt.php?file=$matches[2]&nid=$nid";

  $out = $matches[1] . $matches[2] . $matches[3] . $str2 . $str3;

  return $out;  
}

/**
 * Get the download counter of the specific file
 */
function pubdlcnt_get_total_counter($name) {
  $count = db_query("SELECT count FROM {pubdlcnt} WHERE name=:name", array(':name' => $name))->fetchField();
  if (empty($count)) return 0;
  else return $count;
}

/**
 * Get the fid of the given file name
 */
function pubdlcnt_get_fid($name) {
  $fid = db_query("SELECT fid FROM {pubdlcnt} WHERE name=:name", array(':name' => $name))->fetchField();
  if(empty($fid)) return 0;
  else return $fid;
}

/**
 * Generate horizontal bar 
 */
function _pubdlcnt_count_bar($count, $max) {
  $width = (int)((100 / $max) * $count); 
  if ($count && $width == 0) $width = 1;

  $output  = '<div style="width:100px; background-color:#eee;">';
  $output .= '<div style="width:' . $width 
              . 'px; background-color:#88aaff; font-size:9px">';
  $output .= '&nbsp;';
  $output .= '</div></div>';
  return $output;
}

/**
 * Post rendering node contents
 */
function pubdlcnt_post_render($html, $build) {

  $nid = $build['#node']->nid;
  $html = _filter_pubdlcnt($html, $nid);
  return $html;
}

/**
 * Implements hook_node_view_alter().
 */
function pubdlcnt_node_view_alter(&$build) {

  $nodetype = $build['#node']->type;
  $supported_nodetypes = variable_get('pubdlcnt_supported_nodetypes', array());

  $num_supported_nodetypes = 0;
  foreach ($supported_nodetypes as $type => $value) {
    if ($value != 0) {
      $num_supported_nodetypes++;
    }
  }

  if (!$num_supported_nodetypes || !empty($supported_nodetypes[$nodetype])) {
    if($build['#view_mode'] == 'full' || $build['#view_mode'] == 'teaser') {
      // we count only the download for the full/teaser mode of the supported node types.
      $build['#post_render'][] = 'pubdlcnt_post_render';
    }
  }
}

/**
 * Form: General Configutation Settings
 *
 * @see pubdlcnt_config_form_validate()
 */
function pubdlcnt_config_form() {

  drupal_add_js(drupal_get_path('module', 'pubdlcnt') . '/pubdlcnt.js');

  $valid_extensions = variable_get('pubdlcnt_valid_extensions', '7z bz bz2 gz gzip hqx iso lha lzh pkg pdf rpm sea sit tar tbz tgz zip');

  $form['pubdlcnt_valid_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Valid file name extensions'),
    '#default_value' => $valid_extensions,
    '#size' => 100,
    '#maxlength' => 255,
    '#description' => t('Separate extensions with a space and do not include the leading dot.'),
  );
  $form['pubdlcnt_supported_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Supported node types'),
    '#options' => node_type_get_names(),
    '#default_value' => variable_get('pubdlcnt_supported_nodetypes', array()),
    '#description' => t('Select the node types that uses the download count. If none of them are selected, all node types will be supported.'),
  );

  $form['recording'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recording options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['recording']['pubdlcnt_skip_duplicate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip duplicate download'),
    '#default_value' => variable_get('pubdlcnt_skip_duplicate', 0),
    '#description' => t('When enabled, it skips counting the duplicate file downlaods from the same IP address within the same day.'),
  );
  $form['recording']['pubdlcnt_save_history'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save download history records'),
    '#default_value' => variable_get('pubdlcnt_save_history', 1),
    '#description' => t('When disabled, no history data is saved and all you can get the total number of download and the last download time for each file.'),
  );
  $form['recording']['pubdlcnt_save_period'] = array(
    '#type' => 'select',
    '#title' => t('Maximum saving period'),
    '#default_value' => variable_get('pubdlcnt_save_period', 0),
    '#options' => array(
      0 => t('Unlimited'),
      1 => t('2 years'),
      2 => t('1 year'),
      3 => t('6 months'),
      4 => t('3 months'),
      5 => t('1 month'),
    ),
    '#prefix' => '<div id="pubdlcnt-wrapper-period">',
    '#suffix' => '</div>',
  );
  $form['display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['display']['pubdlcnt_pagination'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of list items per report page'),
    '#description' => t('Set to 0 to show all items without using the pager.'),
    '#default_value' => variable_get('pubdlcnt_pagination', 100),
    '#size' => 3,
  );
  $form['display']['pubdlcnt_num_blocks'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of blocks'),
    '#description' => t('The total number of independent blocks you want. Enter a number between 0 to 99. If you set this to 0, you will have no blocks created.'),
    '#default_value' => variable_get('pubdlcnt_num_blocks', 1),
    '#size' => 3,
  );
  return system_settings_form($form);
}

/**
 * Form validation: General Configuration Settings
 */
function pubdlcnt_config_form_validate($form, &$form_state) {
  $number = $form_state['values']['pubdlcnt_num_blocks'];
  if(!is_numeric($number) || strlen($number) > 2) {
    form_set_error('pubdlcnt_num_blocks', t('You must enter a number from 0 to 99.'));
  }
}

/**
 * Form: Download Counts Form
 *
 * Path
 *  admin/reports/pubdlcnt/counter                    entire overview (all period)
 *  admin/reports/pubdlcnt/counter                    entire overview (all period)
 *  admin/reports/pubdlcnt/counter/all/2010           entire overview of 2010
 *  admin/reports/pubdlcnt/counter/all/2010/7         entire overview of 2010/7
 *  admin/reports/pubdlcnt/counter/all/2010/7/14      entire overview of 2010/7/14
 *
 *  admin/reports/pubdlcnt/counter/(file)             a file overview (all period)
 *  admin/reports/pubdlcnt/counter/(file)/2010        a file overview of 2010
 *  admin/reports/pubdlcnt/counter/(file)/2010/11     a file overview of 2010/11
 *  admin/reports/pubdlcnt/counter/(file)/2010/11/23  a file overview of 2010/11/23

 *  admin/reports/pubdlcnt/counter/(file)/confirm     a file counter reset confirm
 *  admin/reports/pubdlcnt/counter/(file)/reset       a file counter reset execute
 * 
 * Parameters: 
 *  p1 = file name or 'all' (or NULL)
 *  p2 = year or 'confirm' or 'reset' (or NULL)
 *  p3 = month (or NULL)
 *  p4 = day (or NULL)
 *
 * @see pubdlcnt_counter_form_submit()
 */
function pubdlcnt_counter_form($form, &$form_state, $p1=NULL, $p2=NULL, $p3=NULL, $p4=NULL) {
  global $paper_page_array, $pager_total;
  $mode = MODE_TOTAL;
  $name = $tgt_y = $tgt_m = $tgt_d = NULL;

  $save_history = variable_get('pubdlcnt_save_history', 1);

  if ($p1) {
    $name = check_url($p1);
    // convert '%20' back to space characters
    $name = preg_replace('/%20/', ' ', $name);
    if ($name == 'all') {
       $mode = MODE_TOTAL;
    }
    else {
       $mode = MODE_DETAIL;
    }
  }
  else {
    $name = 'all';
    $mode = MODE_TOTAL;
  }
  if ($p2) {
    $p2 = check_plain($p2);
    if ($p2 == 'confirm') {
      $mode = MODE_CONFIRM;
    }
    else if ($p2 == 'reset') {
      $mode = MODE_RESET;
    }
    else {
      $tgt_y = (int)$p2;
    }
  }
  if ($p3) {
    $tgt_m = (int)check_plain($p3);
    if ($tgt_m < 1 || 12 < $tgt_m) {
      $tgt_m = NULL;
    }
  }
  if ($p4) {
    $tgt_d = (int)check_plain($p4);
    if ($tgt_d < 1 || 31 < $tgt_d) {
      $tgt_d = NULL;
    }
  }
  // use current date if not specified
  if (empty($tgt_y)) $tgt_y = (int)(date("Y"));
  if (empty($tgt_m)) $tgt_m = (int)(date("n"));

  // first, obtain the max download count for any file
  $max = db_query("SELECT MAX(count) as max_count FROM {pubdlcnt}")->fetchField();

  /**
   *------------------------------------------------------------------
   * Mode: Total (with pager and sortable table)
   *------------------------------------------------------------------
   */
  if ($mode == MODE_TOTAL) {
    // sortable table: default sort by count (DESC)
    $header = array(
      array('data' => t('Count'), 'field' => 'total', 'sort' => 'desc', 'colspan' => '2'),
      array('data' => t('Title'), 'field' => 'title'),
      array('data' => t('File Name'), 'field' => 'name'),
      array('data' => t('User (owner)'), 'field' => 'username'),
      array('data' => t('Last Download'), 'field' => 'utime'),
      array('data' => t('Operation')),
    );
    // get total number of files and total download counts
    $total_files = db_query("SELECT COUNT(DISTINCT(name)) FROM {pubdlcnt}")->fetchField();
    $total_counts = db_query("SELECT SUM(count) FROM {pubdlcnt}")->fetchField();

    // show list with pager

    $query = db_select('pubdlcnt', 'p');
    $query->join('node', 'n', 'n.nid = p.nid');
    $query->join('users', 'u', 'u.uid = n.uid');
    $query->addField('p', 'name');
    $query->addField('p', 'url');
    $query->addField('p', 'nid');
    $query->addField('u', 'uid');
    $query->addField('u', 'name', 'username');
    $query->addField('n', 'title');
    $query->addExpression('SUM(p.count)', 'total');
    $query->addExpression('MAX(p.utime)', 'last');
    $query->groupBy('p.name');

    // max list items per page (0 for unlimit)
    $pagination = variable_get('pubdlcnt_pagination', 100);
    if ($pagination) {
      $query = $query->extend('PagerDefault')->limit($pagination)->extend('TableSort')->orderByHeader($header);
    }
    else {
      $query = $query->extend('TableSort')->orderByHeader($header);
    }
    $result = $query->execute();

    $rows = array();
    foreach ($result as $rec) {
      $dateonly = date('Y-m-d (D)', $rec->last); 
      $row = array();
      $row[] = array('data' => $rec->total, 'align' => 'right');
      $row[] = array('data' => _pubdlcnt_count_bar($rec->total, $max), 'align' => 'left');
      // obtain node title in the current language if there's transated node
      $nid = _pubdlcnt_get_translated_node_id($rec->nid);
      $node = node_load($nid);
      $row[] = array('data' => '<a href="' . base_path() . _pubdlcnt_language_prefix() . 'node/' . $nid . '">' . $node->title . '</a>', 
                               'align' => 'left', 'style' => 'padding-right: 20px');
      $row[] = array('data' => '<a href="' . base_path() . _pubdlcnt_language_prefix() . 'node/' . $nid . '">' . $rec->name, 
                               'align' => 'left', 'style' => 'padding-right: 20px');
      $row[] = array('data' => '<a href="' . base_path() . 'user/' . $rec->uid . '">' . $rec->username . '</a>', 'align' => 'left'); 
      $row[] = array('data' => $dateonly,   'align' => 'left', 'style' => 'padding-right: 20px');
      if ($save_history) {
        $row[] = array('data' => '<a href="' 
            . base_path()
            . _pubdlcnt_language_prefix()
            . 'admin/reports/pubdlcnt/counter/'
            . $rec->name
            . '">'
            . t('Detail')
            . '</a>' 
            . '&nbsp;&nbsp;|&nbsp;&nbsp;'
            . '<a href="'
            . base_path()
            . _pubdlcnt_language_prefix()
            . 'admin/reports/pubdlcnt/counter/'
            . $rec->name
            . '/confirm' // MODE_CONFIRM
            . '">'
            . t('Reset')
            . '</a>', 
            'align' => 'left', 'style' => 'padding: 2px 10px');
      }
      else {
        $row[] = array('data' => '<a href="' 
            . '<a href="'
            . base_path()
            . _pubdlcnt_language_prefix()
            . 'admin/reports/pubdlcnt/counter/'
            . $rec->name
            . '/confirm' // MODE_CONFIRM
            . '">'
            . t('Reset')
            . '</a>', 
            'align' => 'left', 'style' => 'padding: 2px 10px');
      }
      $rows[] = $row;
    }
    if (count($rows)) {
      $output = theme('table', array('header' => $header, 'rows' => $rows));
      $output .= '<br />';
      if ($pagination) {
        $output .= theme('pager');
      }
      $output .= t('Number of files: %num1, Total downloads: %num2',
            array('%num1' => $total_files, '%num2' => $total_counts));
    }
    else {
      $output = t('No download count records are found for the file.');
    }
    $form['total_list'] = array(
      '#type' => 'item',
      '#markup' => '<p>' . $output . '</p>',
    );
  }
  /**
   *---------------------------------------------------------------
   * Mode: Confirm (confirm to reset the counter)
   *       $name - file name 
   *---------------------------------------------------------------
   */
  else if ($mode == MODE_CONFIRM) {
    $form['confirm'] = array(
    '#type' => 'hidden',
    '#value' => 1,
    );
    $form = array();
    $output = t('Are you sure you want to reset the counter of the file %name?',
      array('%name' => $name));
    $output .= '<br />' . t('This action cannot be undone!') . '<br /><br />';
    $form_state['reset_target'] = $name;  
    return confirm_form($form, 
      NULL, // title
      'admin/reports/pubdlcnt/counter',
      $output,
      t('Proceed'),
      t('Cancel'));
  }
  /**
   *---------------------------------------------------------------
   * Mode: Reset (delete counter data for the specified file)
   *       $name - file name 
   *---------------------------------------------------------------
   */
  else if ($mode == MODE_RESET) {
    // reset counter
    $result = db_query("SELECT * FROM {pubdlcnt} WHERE name=:name", array(':name' => $name));
    if ($result) {
      db_delete('pubdlcnt')
        ->condition('name', $name)
        ->execute();
      $save_history = variable_get('pubdlcnt_save_history', 1);
      if ($save_history) {
        $rec = $result->fetchObject();
        db_delete('pubdlcnt_history')
          ->condition('fid', $rec->fid)
          ->execute();
      }
      $output = t('The counter of the file %name is reset to 0',
        array('%name' => $name));
      drupal_set_message($output);
    }
    drupal_goto('admin/reports/pubdlcnt/counter'); // go back to file list
  }
  /**
   *------------------------------------------------------------------
   * Mode: Detail
   *       $name - file name 
   *       $tgt_y - show daily stastic of a specific period (or empty)
   *       $tgt_m - show daily stastic of a specific period (or empty)
   *------------------------------------------------------------------
   */
  else if ($mode == MODE_DETAIL) {

    //
    // Check all counter data for the file and construct $counts array
    //

    $counts = array();

    $fid = pubdlcnt_get_fid($name);

    $result = db_query("SELECT * FROM {pubdlcnt_history} WHERE fid=:fid ORDER BY utime DESC", array(':fid' => $fid));
    foreach ($result as $rec) {
      // accumulate counter for yearly and monthly 
      $y = date('Y', $rec->utime);
      $m = date('n', $rec->utime);
      $d = date('j', $rec->utime);
      @$counts[$y][0][0]   += $rec->count;
      @$counts[$y][$m][0]  += $rec->count;
      @$counts[$y][$m][$d]  = $rec->count;
    }
    if (!count($counts)) {
      $output = t('No download count records are found for the file.');
      $form['daily']['counts'] = array(
        '#type' => 'item',
        '#markup' => $output,
      );
      return $form;
    }
    $min_y = $y;
    $min_m = $m;
    $min_d = $d;
    $cur_y = date("Y");
    $cur_m = date("n");
    $cur_d = date("j");

    //
    // File name and grand total counts
    //
    $total = pubdlcnt_get_total_counter($name);
    $form['name'] = array(
      '#type' => 'item',
      '#markup' => '<p align="left"><b>' . $name 
            . '</b> (' . t('Total downloads: ') 
            . '<b>' . $total . '</b>)</p>',
    );
    //
    // Daily Counts
    //
    $header = array(
      array('data' => t('Date')),
      array('data' => t('Count'), 'colspan' => '2'),
    );
    // check the last day of the target month (28?29?30?31?)
    $lastday = date('t', mktime(0, 0, 0, $tgt_m, 1, $tgt_y));
    $rows = array();
    for ($d = $lastday ; $d >= 1 ; $d--) {
      // skip the future date
      if ($tgt_y == $cur_y && $tgt_m == $cur_m && $d > $cur_d) continue;
      // reached the date older than the oldest date - exit
      if ($tgt_y == $min_y && $tgt_m == $min_m && $d < $min_d) break;
      if (isset($counts[$tgt_y][$tgt_m][$d])) {
        $count = $counts[$tgt_y][$tgt_m][$d];
      }
      else {
        $count = 0;
      }
      $dateonly = date('Y-m-d (D)', mktime(0, 0, 0, $tgt_m, $d, $tgt_y));
      $row = array();
      $row[] = array('data' => $dateonly,   'align' => 'left');
      $row[] = array('data' => $count, 'align' => 'right');
      $row[] = array('data' => _pubdlcnt_count_bar($count, $max), 'align' => 'left');
      $rows[] = $row;
    }
    $output = theme('table', array('header' => $header, 'rows' => $rows));

    $form['daily'] = array(
      '#type' => 'fieldset',
      '#title' => t('Daily Counts') . ' (' . $tgt_y . '-' . $tgt_m . ')',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['daily']['counts'] = array(
      '#type' => 'item',
      '#markup' => $output,
    );

    //
    // Monthly Counts
    //
    $rows = array();
    $header = array(
      array('data' => t('Year')),
      array('data' => t('Month')),
      array('data' => t('Count'), 'colspan' => '2'),
      array('data' => t('Operation')),
    );

    for ($y = $cur_y ; $y >= $min_y ; $y--) {
      for ($m = 12 ; $m >= 1 ; $m--) {
        // skip the future month
        if ($y == $cur_y && $m > $cur_m) continue;
        // reached the month older than the oldest month - exit
        if ($y == $min_y && $m < $min_m) break;
        if (isset($counts[$y][$m][0])) $count = $counts[$y][$m][0];
        else $count = 0;
        $row = array();
        $row[] = array('data' => $y,     'align' => 'left');
        $row[] = array('data' => $m,     'align' => 'left');
        $row[] = array('data' => $count, 'align' => 'right');
        $row[] = array('data' => _pubdlcnt_count_bar($count, $max), 'align' => 'left');
        $row[] = array('data' => '<a href="' 
            . base_path()
            . _pubdlcnt_language_prefix()
            . 'admin/reports/pubdlcnt/counter/'
            . $name
            . '/'
            . $y
            . '/'
            . $m
            . '">'
            . t('Detail')
            . '</a>', 'align' => 'left');
        $rows[] = $row;
      }
    }
    $output2 = theme('table', array('header' => $header, 'rows' => $rows));

    $form['monthly'] = array(
      '#type' => 'fieldset',
      '#title' => t('Monthly Counts'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['monthly']['counts'] = array(
      '#type' => 'item',
      '#markup' => $output2,
    );

    //
    // Yearly Counts
    //
    $rows = array();
    $header = array(
      t('Year'),
      t('Count'),
    );
    for ($y = $cur_y ; $y >= $min_y ; $y--) {
      if (isset($counts[$y][0][0])) $count = $counts[$y][0][0];
      else $count = 0;
      $row = array();
      $row[] = array('data' => $y,     'align' => 'left');
      $row[] = array('data' => $count, 'align' => 'right');
      $rows[] = $row;
    }
    $output3 = theme('table', array('header' => $header, 'rows' => $rows));

    $form['yearly'] = array(
      '#type' => 'fieldset',
      '#title' => t('Yearly Counts'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['yearly']['counts'] = array(
      '#type' => 'item',
      '#markup' => $output3,
    );

    // pressing button will redirect to the file list page
    $form['button_total'] = array(
      '#type' => 'submit',
      '#value' => t('Go back to the file list'),
    );
  }

  return $form;
}

/**
 * Implements hook_submit().
 */
function pubdlcnt_counter_form_submit($form, &$form_state) {

  $op = $form_state['values']['op'];

  if ($op == t('Proceed')) {
    $path = 'admin/reports/pubdlcnt/counter';
    if (isset($form_state['reset_target'])) {
      $path .= '/' . $form_state['reset_target'];
      $path .= '/reset'; // MODE_RESET
    }
    drupal_goto($path);
  }
  else if ($op == t('Go back to the file list')) {
    $form_state['redirect'] = array('admin/reports/pubdlcnt/counter');
  }
}


/**
 * Form: Export form
 *
 * @see pubdlcnt_export_form_submit()
 */
function pubdlcnt_export_form() {
  $form['pubdlcnt_export_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Export mode'),
    '#options' => array(
      t('export entire counter data'),
      t('export summary by file'),
    ),
    '#default_value' => variable_get('pubdlcnt_export_mode', 0),
  );
  $form['export_note'] = array(
    '#type' => 'item',
    '#markup' => t('The exported file has the following four columns.') 
      . '<ul>'
      . '<li>' . t('Node title')
      . '<li>' . t('File name')
      . '<li>' . t('File URL')
      . '<li>' . t('Node owner (user name)')
      . '<li>' . t('Date (YYYY-MM-DD)')
      . '<li>' . t('Day of the week (Sun-Sat)')
      . '<li>' . t('Download count')
      . '</ul>'
      . '<br />',
  );
  $form['export_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );
  return $form;
}

/**
 * Implements hook_submit().
 */
function pubdlcnt_export_form_submit($form, &$form_state) {

  $op = $form_state['values']['op'];
  if ($op == t('Export')) {
    $export_mode = $form_state['values']['pubdlcnt_export_mode'];
    // save the export mode
    variable_set('pubdlcnt_export_mode', $export_mode);

    $file_path = file_directory_temp() . '/public_download_count_' 
            . date('Y-m-d') . '.txt';
    export_counter_file($file_path, $export_mode);
    if (!file_exists($file_path)) {
      die("Error: File $file_path does not exists.");
    }
    if (!($fp = fopen($file_path, "r"))) {
      die("Error: Can not open file $file_path for reading.");
    }
    if (($file_size = filesize($file_path)) == 0) {
      die("Error: File $file_path is empty.");
    }

    // download (open dialog and let user save a file)
    $headers = array(
      array('key' => 'Content-Type', 'value' => 'application/octet-stream'),
      array('key' => 'Content-Disposition', 'value' => 'attachment; filename="' . basename($file_path) . '"'),
      array('key' => 'Content-Length', 'value' => $file_size),
    );
    foreach ($headers as $header) {
      // prevent HTTP header injection
      $header['value'] = preg_replace('/\r?\n(?!\t| )/', '', $header['value']);
      drupal_add_http_header($header['key'], $header['value']);
    }
    ob_clean(); // clear output buffer
    flush();
    readfile($file_path);

    // Ask devel.module not to print the footer.
    $GLOBALS['devel_shutdown'] = FALSE;

    // delete the temporary file
    unlink($file_path);
    return;
  }
}

/**
 * Export - Export counter file as a tab separated text file
 */
function export_counter_file($file_path, $export_mode) {
  // $export_mode - 0:entire counter data, 1:summary by file

  // open the temporary file
  if (!($fp = fopen($file_path, "w"))) {
    die("Error: Can not open file $file_path for writing.");
  }
  if ($export_mode == 0) {
    $result = db_query("SELECT h.count, h.utime, p.name, p.url, n.title, u.name AS username FROM {pubdlcnt_history} h INNER JOIN {pubdlcnt} p ON p.fid = h.fid INNER JOIN {node} n ON p.nid = n.nid INNER JOIN {users} u ON u.uid = n.uid ORDER BY p.name, h.utime DESC");
    foreach ($result as $rec) {
      $dateonly = date('Y-m-d', $rec->utime);
      $dow      = date('D', $rec->utime);
      $row = "\"" . $rec->title . "\"\t" . $rec->name . "\t" . $rec->url . "\t" . 
        $rec->username . "\t" . $dateonly . "\t" . $dow . "\t" . $rec->count . "\n";
      fwrite($fp, $row);
    }
  }
  else if ($export_mode == 1) {
    $result = db_query("SELECT p.name, p.url, p.count, p.utime, n.title, u.name AS username FROM {pubdlcnt} p INNER JOIN {node} n ON p.nid = n.nid INNER JOIN {users} u ON u.uid = n.uid ORDER BY p.name, p.utime DESC");
    foreach ($result as $rec) {
      $dateonly = date('Y-m-d', $rec->utime);
      $dow      = date('D', $rec->utime);
      $row = "\"" . $rec->title . "\"\t" . $rec->name . "\t" . $rec->url . "\t" . 
        $rec->username . "\t" . $dateonly . "\t" . $dow . "\t" . $rec->total . "\n";
      fwrite($fp, $row);
    }
  }
  // close the temporary file
  fclose($fp);
}

/**
 * Implements hook_menu
 */
function pubdlcnt_menu() {
  $items = array();

  // config section
  $items['admin/config/pubdlcnt'] = array(
    'title' => t('Public Download Count'),
    'description' => t('Provides file download counter for the public file system.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pubdlcnt_config_form'),
    'access arguments' => array('administer public download count'),
    'type' => MENU_NORMAL_ITEM,
  );

  // report section
  $items['admin/reports/pubdlcnt'] = array(
    'title' => t('Public Download Count'),
    'description' => t('Allow users to see the file download count'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pubdlcnt_counter_form'),
    'access arguments' => array('administer public download count'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/pubdlcnt/counter'] = array(
    'title' => t('Download Counts'),
    'description' => t('Allow users to see the file download count'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pubdlcnt_counter_form'),
    'access arguments' => array('administer public download count'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/reports/pubdlcnt/counter/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pubdlcnt_counter_form', 4, 5, 6, 7),
    'access arguments' => array('administer public download count'),
  );
  $items['admin/reports/pubdlcnt/export'] = array(
    'title' => t('Export'),
    'description' => t('Allow users to export the download count data as a file'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pubdlcnt_export_form'),
    'access arguments' => array('administer public download count'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // user account
  $items['user/%user/pubdlcnt'] = array(
    'title' => 'Download Counts',
    'page callback' => 'pubdlcnt_user_page',
    'page arguments' => array(1),
    'access callback' => 'pubdlcnt_user_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -1,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function pubdlcnt_permission() {
  $permissions = array(
    'administer public download count' => array(
      'title' => 'Administer Public Download Count module',
      'description' => '',
    ),
    'view total download count in nodes' => array(
      'title' => 'View total download counts in nodes',
      'description' => '',
    ),
    'view total download count in block' => array(
      'title' => 'View total dounload count in block',
      'description' => '',
    ),
  );
  return $permissions;
}

/**
 * Implements hook_theme().
 *
 * This will apply pubdlcnt filter to Views field
 */
function pubdlcnt_theme($existing, $type, $theme, $path) {
  return array(
    'pubdlcnt_counter' => array(
      'variables' => array('type' => NULL, 'value' => NULL, 'path' => NULL),
    ),
    'views_view_field' => array(
      'variables' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'pubdlcnt-views-view-field',
      'original hook' => 'views_view_field',
      'path' => drupal_get_path('module', 'pubdlcnt') . '/views',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function pubdlcnt_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'pubdlcnt') . '/includes'
  );
}

/**
 * Implements hook_block_info().
 */
function pubdlcnt_block_info() {
  $blocks = array();
  for ($i = 1 ; $i <= variable_get('pubdlcnt_num_blocks', 1) ; $i++) {
    $blocks[] = array('info' => t('Top Download !num', array('!num' => $i)));
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function pubdlcnt_block_configure($delta = '') {
  $form['block_count_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Item count'),
    '#default_value' => variable_get('pubdlcnt_block_count_' . $delta, 10),
    '#size' => 3,
    '#description' => t('The maxmum number of items to display. Use 0 to unlimit.'),
  );
  $form['block_link_' . $delta] = array(
    '#type' => 'select',
      '#title' => t('Item display'),
      '#default_value' => variable_get('pubdlcnt_block_link_' . $delta, 1),
      '#options' => array(
        0 => t('File name - no link'), 
        1 => t('File name - link to node'),
        2 => t('Node title - no link'), 
        3 => t('Node title - link to node'),
        4 => t('User(owner) name - no link'),
        5 => t('User(owner) name - link to user profile'),
      ),
      '#description' => t('Determines how list items are displayed.'),
  );
  $form['block_period_' . $delta] = array(
    '#type' => 'select',
      '#title' => t('Counting period'),
    '#default_value' => variable_get('pubdlcnt_block_period_' . $delta, 0),
    '#options' => array(
      0 => t('All time'), 
      1 => t('Last year'),
      2 => t('This year'),
      3 => t('Last month'),
      4 => t('This month'),
      5 => t('Last week'),
      6 => t('This week'),
      7 => t('Yesterday'),
      8 => t('Today'),
      9 => t('Custom'),
    ),
    '#description' => t('Determines the time period of counting. If you select Custom, be sure to specify the custom start/end date below.'),
  );
  $form['block_from_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Start date (YYYY-MM-DD)'),
    '#default_value' => variable_get('pubdlcnt_block_from_' . $delta, ''),
    '#size' => 20,
    '#description' => t('This field is used only when the Custom counting period is selected. Leave blank for no start date.'),
    '#element_validate' => array('pubdlcnt_block_validate_element_date'),
  );
  $form['block_till_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('End date (YYYY-MM-DD)'),
    '#default_value' => variable_get('pubdlcnt_block_till_' . $delta, ''),
    '#size' => 20,
    '#description' => t('This field is used only when the Custom counting period is selected. Leave blank for no end date.'),
    '#element_validate' => array('pubdlcnt_block_validate_element_date'),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function pubdlcnt_block_save($delta = '', $edit = array()) {
  variable_set('pubdlcnt_block_count_'  . $delta, $edit['block_count_' . $delta]);
  variable_set('pubdlcnt_block_link_'   . $delta, $edit['block_link_' . $delta]);
  variable_set('pubdlcnt_block_period_' . $delta, $edit['block_period_' . $delta]);
  variable_set('pubdlcnt_block_from_' .   $delta, $edit['block_from_' . $delta]);
  variable_set('pubdlcnt_block_till_' .   $delta, $edit['block_till_' . $delta]);
}

/**
 * Implements hook_block_view().
 */
function pubdlcnt_block_view($delta = '') {
  $items = array();
  $count  = variable_get('pubdlcnt_block_count_'  . $delta, 10);
  $link   = variable_get('pubdlcnt_block_link_'   . $delta, 1);
  $period = variable_get('pubdlcnt_block_period_' . $delta, 0);
  $from   = variable_get('pubdlcnt_block_from_'   . $delta, '');
  $till   = variable_get('pubdlcnt_block_till_'   . $delta, '');
  $from_utime = strtotime($from);
  $till_utime = strtotime($till);

  $period_title = array(
    t(''), 
    t('Last year'),
    t('This year'),
    t('Last month'),
    t('This month'),
    t('Last week'),
    t('This week'),
    t('Yesterday'),
    t('Today'),
  );

  $block['subject'] = t('Top Download') . ' ' . $period_title[$period];

  if ($link == 4 || $link == 5) {
    $query = _pubdlcnt_generate_top_user_query($count, $period, $from_utime, $till_utime);
  }
  else {
    $query = _pubdlcnt_generate_top_download_query($count, $period, $from_utime, $till_utime);
  }
  $result = db_query($query);

  foreach ($result as $rec) {
    $nid = _pubdlcnt_get_translated_node_id($rec->nid);
    // obtain node title in the current language if there's transated node
    $node = node_load($nid);

    if (isset($node->uri['path'])) { // if path alias exists 
      $path = base_path() . _pubdlcnt_language_prefix() . $node->uri['path'];
    }
    else { // otherwise
      $path = base_path() . _pubdlcnt_language_prefix() . 'node/' . $nid;
    }
    switch ($link) {
        case 0: // file name - no link
          $name = $rec->name;
          break;
        case 1: // file name - link to node
          $name = $rec->name;
          $name = '<a href="' . $path . '">' . $name . '</a>';
          break;
        case 2: // node title - no link
          $name = $node->title;
          break;
        case 3: // node title - link to node
          $name = $node->title;
          $name = '<a href="' . $path . '">' . $name . '</a>';
          break;
        case 4: // user(owner) - no link
          $name = $rec->username;
          break;
        case 5: // user(owner) - link to user
          $name = $rec->username;
          $name = '<a href="' . base_path() . 'user/' . $rec->uid . '">' . $name . '</a>';
          break;
      }
      if (user_access('view total download count in block')) {
        if ($link == 4 || $link == 5) {
          $path = base_path() . _pubdlcnt_language_prefix() 
               . 'user/' . $rec->uid . '/pubdlcnt';
        }
        else {
          $save_history = variable_get('pubdlcnt_save_history', 1);
          if($save_history) {
            $path = base_path() . _pubdlcnt_language_prefix() 
               . 'admin/reports/pubdlcnt/counter/' . $rec->name;
          }
          else {
            $path = base_path() . _pubdlcnt_language_prefix() 
               . 'admin/reports/pubdlcnt/counter';
          }
        }

        if (user_access('administer public download count')) {
          $name .= theme('pubdlcnt_counter', array('type' => 'block', 'value' => $rec->total, 'path' => $path));
        }
        else { // non admin (no link to statistics page)
          $name .= theme('pubdlcnt_counter', array('type' => 'block', 'value' => $rec->total, 'path' => NULL));
        }
      }
      $item = array(
        'data' => $name,
        'class' => array('pubdlcnt_file'),
      );
      $items[] = $item;
    } // loop for each list item

    // theming the list for output
    $block['content'] = theme('item_list', array('items' => $items));

  return $block;
}

/**
 * Block form element validation
 */
function pubdlcnt_block_validate_element_date($element) {
  if ($element['#value'] != '') {
    if (!preg_match("/^\s*\d{4}-\d{1,2}-\d{1,2}\s*$/", $element['#value'])) {
      form_error($element, t('Invalid date format. It must be YYYY-MM-DD or blank.'));
    }
  }
}

/**
 * Generates database query of the block parameters (type1: by user(owner))
 *
 * @param $count - number of items to be displayed in a list
 *        $period - 0-8 (0=all time, 1=last year, 2=this year.... 8=today)
 */
function _pubdlcnt_generate_top_user_query($count = 10, $period = 0, $cfrom = '', $ctill = '') {

  $query = "SELECT p.nid, n.uid, n.title, u.name AS username, SUM(h.count) AS total FROM {pubdlcnt_history} h INNER JOIN {pubdlcnt} p ON p.fid = h.fid INNER JOIN {node} n ON p.nid = n.nid INNER JOIN {users} u ON u.uid = n.uid ";
  switch ($period) {
    case 1: // Last year
      $from = mktime(0, 0, 0, 1, 1, date("Y")-1);
      $to   = mktime(0, 0, 0, 12, 31, date("Y")-1);
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime <= '" . $to . "'";
      break;
    case 2: // This year
      $from = mktime(0, 0, 0, 1, 1, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "'";
      break;
    case 3: // Last month
      $from = mktime(0, 0, 0, date("m")-1, 1, date("Y"));
      $to   = mktime(0, 0, 0, date("m")-1, 31, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime <= '" . $to . "'";
      break;
    case 4: // This month
      $from = mktime(0, 0, 0, date("m"), 1, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "'";
      break;
    case 5: // Last week
      $base = strtotime("-1 week");
      $dow = date("w"); // 0=Sunday - 6=Saturday
      $from = strtotime(date("Y-m-d", $base - ((int)$dow * 86400)) . ' 00:00:00');
      $to   = strtotime(date("Y-m-d", $base + ((6 - (int)$dow) * 86400)) . ' 00:00:00');
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime < '" . $to . "'";
      break;
    case 6: // This week
      $dow = date("w"); // 0=Sunday - 6=Saturday
      $from = strtotime(date("Y-m-d", time() - ((int)$dow * 86400)) . ' 00:00:00');
      $to   = strtotime(date("Y-m-d", time() + ((6 - (int)$dow) * 86400)) . ' 00:00:00');
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime < '" . $to . "'";
      break;
    case 7: // Yesterday
      $from = mktime(0, 0, 0, date("m"), date("d")-1, date("Y"));
      $query .= "WHERE h.utime = '" . $from . "'";
      break;
    case 8: // Today
      $from = time;
      $query .= "WHERE h.utime = '" . $from . "'";
      break;
    case 9: // Custom
      if ($cfrom && $ctill) { // both start and end date
        $query .= "WHERE h.utime >= '" . $cfrom . "' AND h.utime <= '" . $ctill . "'";
      }
      else if ($cfrom) { // start date only
        $query .= "WHERE h.utime >= '" . $cfrom . "'";
      }
      else if ($ctill) { // end date only
        $query .= "WHERE h.utime <= '" . $ctill . "'";
      }
      break;
    case 0: // All time
    default: 
      break;
  }
  $query .= " GROUP BY n.uid ORDER BY total DESC";
  if ($count > 0) {
    $query .= " LIMIT " . $count;
  }
  return $query;
}

/**
 * Generates database query of the block parameters (type2: by file)
 *
 * @param $count - number of items to be displayed in a list
 *        $period - 0-8 (0=all time, 1=last year, 2=this year.... 8=today)
 */
function _pubdlcnt_generate_top_download_query($count = 10, $period = 0, $cfrom = '', $ctill = '') {

  $query = "SELECT p.name, p.nid, n.title, SUM(h.count) AS total FROM {pubdlcnt_history} h INNER JOIN {pubdlcnt} p ON h.fid = p.fid INNER JOIN {node} n ON p.nid = n.nid ";
  switch ($period) {
    case 1: // Last year
      $from = mktime(0, 0, 0, 1, 1, date("Y")-1);
      $to   = mktime(0, 0, 0, 12, 31, date("Y")-1);
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime <= '" . $to . "'";
      break;
    case 2: // This year
      $from = mktime(0, 0, 0, 1, 1, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "'";
      break;
    case 3: // Last month
      $from = mktime(0, 0, 0, date("m")-1, 1, date("Y"));
      $to   = mktime(0, 0, 0, date("m")-1, 31, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime <= '" . $to . "'";
      break;
    case 4: // This month
      $from = mktime(0, 0, 0, date("m"), 1, date("Y"));
      $query .= "WHERE h.utime >= '" . $from . "'";
      break;
    case 5: // Last week
      $base = strtotime("-1 week");
      $dow = date("w"); // 0=Sunday - 6=Saturday
      $from = strtotime(date("Y-m-d", $base - ((int)$dow * 86400)) . ' 00:00:00');
      $to   = strtotime(date("Y-m-d", $base + ((6 - (int)$dow) * 86400)) . ' 00:00:00');
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime < '" . $to . "'";
      break;
    case 6: // This week
      $dow = date("w"); // 0=Sunday - 6=Saturday
      $from = strtotime(date("Y-m-d", time() - ((int)$dow * 86400)) . ' 00:00:00');
      $to   = strtotime(date("Y-m-d", time() + ((6 - (int)$dow) * 86400)) . ' 00:00:00');
      $query .= "WHERE h.utime >= '" . $from . "' AND h.utime < '" . $to . "'";
      break;
    case 7: // Yesterday
      $from = mktime(0, 0, 0, date("m"), date("d")-1, date("Y"));
      $query .= "WHERE h.utime = '" . $from . "'";
      break;
    case 8: // Today
      $from = time;
      $query .= "WHERE h.utime = '" . $from . "'";
      break;
    case 9: // Custom
      if ($cfrom && $ctill) { // both start and end date
        $query .= "WHERE h.utime >= '" . $cfrom . "' AND h.utime <= '" . $ctill . "'";
      }
      else if ($cfrom) { // start date only
        $query .= "WHERE h.utime >= '" . $cfrom . "'";
      }
      else if ($ctill) { // end date only
        $query .= "WHERE h.utime <= '" . $ctill . "'";
      }
      break;
    case 0: // All time
    default: 
      break;
  }
  $query .= " GROUP BY p.name ORDER BY total DESC";
  if ($count > 0) {
    $query .= " LIMIT " . $count;
  }
  return $query;
}

/**
 * Theme function to customize counter value display
 *
 * @param $variables['type']  - either 'node' (including Views field) or 'block'
 *        $variables['value'] - total counter value
 *        $variables['path']  - path to the statistics page (if permission allows)
 */
function theme_pubdlcnt_counter($variables) {

  $type = $variables['type'];
  $value = $variables['value'];
  $path = $variables['path'];
  
  if ($path) {
    $output = ' <a href="' . $path . '">(' . $value . ')</a>';
  }
  else {
    $output = ' (' . $value . ')';
  }
  return $output;
}

/**
 * Returns languae prefix
 */
function _pubdlcnt_language_prefix() {
  global $language;

  // if ($language->prefix != '' && variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != LANGUAGE_NEGOTIATION_NONE) {
  if ($language->prefix != '') {
    return $language->prefix . '/';
  }
  return '';
}

/**
 * Get node id of the current language (if any) 
 */
function _pubdlcnt_get_translated_node_id($nid) {
  global $language;
  $current_lang = $language->language;

  $result = db_query('SELECT n.nid, n.tnid, n.language FROM {node} n WHERE n.nid = :nid OR n.tnid = :tnid', array(':nid' => $nid, ':tnid' => $nid));
  if ($result->rowCount() > 1) {
    // found multiple nodes
    //   which means that the $nid was the node id of the primary language node
    //   so the $result has nodes of all languages 
  }
  else {
    // found only one page
    //   which means that the $nid was the node id of the translated node
    //   or the node id of a neutral language node (= no translation)
    $node = $result->fetchObject();
    if($node->tnid == 0 || $node->language == '') {
      // this is newtral language node
      return $node->nid;
    }
    // now $node->tnid is the node id of the primary language node
    // let's get nodes of all languages
    $result = db_query('SELECT n.nid, n.tnid, n.language FROM {node} n WHERE n.tnid = :tnid', array(':tnid' => $node->tnid));
  }
  foreach ($result as $node) {
    if ($node->language == $current_lang) {
      return $node->nid;
    }
  }
  return $nid; // not found - return original $nid
}

/**
 * Implements hook_cron().
 */
function pubdlcnt_cron() {

  // check if we need to perform or not (we do not perform more than once a day)
  $today = mktime(0, 0, 0, date("m"), date("d"), date("Y")); // Unix timestamp
  $cron_executed = strtotime(variable_get('pubdlcnt_cron_executed', 0));
  if ($today == $cron_executed) return; // we have already executed cron today

  variable_set('pubdlcnt_cron_executed', $today);

  // delete past host record
  db_delete('pubdlcnt_ip')
    ->condition('utime', $today, '<')
    ->execute();

  $save_history = variable_get('pubdlcnt_save_hisotry', 1);
  $save_period = variable_get('pubdlcnt_save_period', 0);
  if (!$save_history || !$save_period) {
    return;
  }
  // $save_history is ON, $save_period is non zero
  switch ($save_period) {
    case 1: // 2 years
      $cutoff = mktime(0, 0, 0, date("m"), date("d"), date("Y")-2);
      break;
    case 2: // 1 year
      $cutoff = mktime(0, 0, 0, date("m"), date("d"), date("Y")-1);
      break;
    case 3: // 6 months
      $cutoff = mktime(0, 0, 0, date("m")-6, date("d"), date("Y"));
      break;
    case 4: // 3 months
      $cutoff = mktime(0, 0, 0, date("m")-3, date("d"), date("Y"));
      break;
    case 5: // 1 month
      $cutoff = mktime(0, 0, 0, date("m")-1, date("d"), date("Y"));
      break;
  }
  // delete history records older than the maximum saving period
  db_delete('pubdlcnt_history')
    ->condition('utime', $cutoff, '<')
    ->execute();
}

/**
 * Check the permission of user page access
 */
function pubdlcnt_user_page_access($account, $user = FALSE) {
  if ($user == FALSE) {
    global $user;
  }
  return $user->uid == 1 || $account->uid == $user->uid;
}

/**
 * Contents of user account page
 */
function pubdlcnt_user_page($user) {
  
  $save_history = variable_get('pubdlcnt_save_history', 1);

  // sortable table: default sort by count (DESC)
  $header = array(
    array('data' => t('Count'), 'field' => 'total', 'sort' => 'desc', 'colspan' => '2'),
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('File Name'), 'field' => 'name'),
    array('data' => t('Last Download'), 'field' => 'date'),
  );
  $admin = user_access('administer public download count');
  if ($admin && $save_history) {
    $header[] = array('data' => t('Operation'));
  }

  // get the max download count for any files from the user
  $max = db_query("SELECT MAX(p.count) as max_count FROM {pubdlcnt} p INNER JOIN {node} n ON p.nid = n.nid WHERE n.uid = :uid", array(':uid' => $user->uid))->fetchField();

  // get total number of files and total download counts
  $total_files = db_query("SELECT COUNT(DISTINCT(p.name)) FROM {pubdlcnt} p INNER JOIN {node} n ON p.nid = n.nid WHERE n.uid = :uid", array(':uid' => $user->uid))->fetchField();
  $total_counts = db_query("SELECT SUM(p.count) FROM {pubdlcnt} p INNER JOIN {node} n ON p.nid = n.nid WHERE n.uid = :uid", array(':uid' => $user->uid))->fetchField();

  // show list with pager

  $query = db_select('pubdlcnt', 'p');
  $query->join('node', 'n', 'n.nid = p.nid');
  $query->addField('p', 'name');
  $query->addField('p', 'nid');
  $query->addField('n', 'title');
  $query->addExpression('SUM(p.count)', 'total');
  $query->addExpression('MAX(p.utime)', 'last');
  $query->groupBy('p.name');
  $query->condition('n.uid', $user->uid);
  $query->groupBy('p.name');

  // max list items per page (0 for unlimit)
  $pagination = variable_get('pubdlcnt_pagination', 100);
  if ($pagination) {
    $query = $query->extend('PagerDefault')->limit($pagination)->extend('TableSort')->orderByHeader($header);
  }
  else {
    $query = $query->extend('TableSort')->orderByHeader($header);
  }
  $result = $query->execute();

  $rows = array();
  foreach ($result as $rec) {
    $dateonly = date('Y-m-d (D)', $rec->last); 
    $row = array();
    $row[] = array('data' => $rec->total, 'align' => 'right');
    $row[] = array('data' => _pubdlcnt_count_bar($rec->total, $max), 'align' => 'left');
    // obtain node title in the current language if there's transated node
    $nid = _pubdlcnt_get_translated_node_id($rec->nid);
    $node = node_load($nid);
    $row[] = array('data' => '<a href="' . base_path() . _pubdlcnt_language_prefix() . 'node/' . $nid . '">' . $node->title . '</a>', 
                               'align' => 'left', 'style' => 'padding-right: 20px');
    $row[] = array('data' => '<a href="' . base_path() . _pubdlcnt_language_prefix() . 'node/' . $nid . '">' . $rec->name . '</a>', 
                               'align' => 'left', 'style' => 'padding-right: 20px');
    $row[] = array('data' => $dateonly,   'align' => 'left', 'style' => 'padding-right: 20px');
    if ($admin && $save_history) { 
      $row[] = array('data' => '<a href="' 
            . base_path()
            . _pubdlcnt_language_prefix()
            . 'admin/reports/pubdlcnt/'
            . $rec->name
            . '">'
            . t('Detail')
            . '</a>', 
            'align' => 'left', 'style' => 'padding: 2px 10px');
    }
    $rows[] = $row;
  }
  if (count($rows)) {
    $output = '<p>';
    $output .= t('Number of files: %num1, Total downloads: %num2',
          array('%num1' => $total_files, '%num2' => $total_counts));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= '</p>';
    if ($pagination) {
      $output .= theme('pager');
    }
  }
  else {
    $output = t('No download count records are found.');
  }
  return $output; 
}
