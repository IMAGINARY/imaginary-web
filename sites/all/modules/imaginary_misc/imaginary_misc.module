<?php

/**
 * implements hook_panels_pane_content_alter()
 */
function imaginary_misc_panels_pane_content_alter(&$content, $pane, $args, $context) {

  //
  // Translate pane titles
  if(isset($content->title)) {
    if($content->title == htmlspecialchars(t('<none>')) || $content->title == t('<none>')) {
      // For some reason some panels have a translated version of <none> as a title,
      // (e.g. "--aucun--" in french) which is showing on the page instead of indicating
      // Drupal not to show a title.
      // I'm not still sure why this is, so this is a bit of a dirty fix.
      $content->title = '<none>';
    }

    if(!empty($content->title) && $content->title !== '<none>') {
      $content->title = t($content->title);
    }
  }
}

/**
 * implements hook_block_view_MODULE_DELTA_alter
 */
function imaginary_misc_block_view_system_user_menu_alter(&$data, $block) {

  // Translates the block title
  if(!empty($block->title) && $block->title !== '<none>') {
    $block->title = t($block->title);
  }
}

/**
 * Implements hook_form_alter().
 */
function imaginary_misc_form_alter(&$form, &$form_state, $form_id) {

  // Add a prefix to the form elements if
  // - The form is for editing an entity
  // - The entity is translatable
  // - It's not a new entity
  // - There are translations stored

  $prefix = ' (' . t('All languages') . ')';

  if ($info = entity_translation_edit_form_info($form, $form_state)) {
    $handler = entity_translation_get_handler($info['entity type'], $info['entity']);
    if (entity_translation_enabled($info['entity type'], $info['entity'])) {
      if (!$handler->isNewEntity()) {
        $handler->entityForm($form, $form_state);
        $translations = $handler->getTranslations();
        $form_langcode = $handler->getFormLanguage();
        if (!isset($translations->data[$form_langcode]) || count($translations->data) > 1) {
          _imaginary_misc_add_translatability_clue($form, $prefix);
        }
      }
    }
  }
}

function _imaginary_misc_process_entity_forms($element) {

  _imaginary_misc_add_translatability_clue($element, ' (' . t('All languages') . ')');

  return $element;
}

function _imaginary_misc_add_translatability_clue(&$element, $suffix) {

  static $fapi_title_elements;

  // Elements which can have a #title attribute according to FAPI Reference.
  if (!isset($fapi_title_elements)) {
    $fapi_title_elements = array_flip(array('checkbox', 'checkboxes', 'date', 'file', 'managed_file', 'item', 'radio', 'radios', 'select', 'text_format', 'textarea', 'textfield', 'weight'));
  }

  if(empty($element['#multilingual'])) {
    if (isset($element['#type']) && isset($fapi_title_elements[$element['#type']]) && isset($element['#title'])) {

      if (empty($element['#multilingual'])) {

        $element['#title'] .= $suffix;
      }

    }
    elseif ($children = element_children($element)) {

      // Skip the "additional settings" fields
      if (!isset($element['#group']) || $element['#group'] != 'additional_settings') {
        foreach ($children as $delta) {
          _imaginary_misc_add_translatability_clue($element[$delta], $suffix);
        }
      }
    }
    else {
      if (isset($element['#title'])) {
        $element['#title'] .= $suffix;
      }
    }
  }

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function imaginary_misc_form_entity_translation_admin_form_alter(&$form, &$form_state, $form_id) {

  $form['entity_translation_shared_labels']['#description'] .= "<br><b>Warning: </b> This functionality is now provided by the imaginary_misc module. <b>Don't enable this setting.</b>";
  if($form['entity_translation_shared_labels']['#default_value'] !== 1) {
    $form['entity_translation_shared_labels']['#disabled'] = true;
    $form['entity_translation_shared_labels']['#title'] .= ' (DISABLED by imaginary_misc)';
  }
}

/**
 * Implements hook_views_api().
 */
function imaginary_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'imaginary_misc') . '/views',
  );
}

/**
 * Implements hook_field_formatter_info()
 */
function imaginary_misc_field_formatter_info() {
  return array(
    'imaginary_license_overview_link' => array(
      'label' => 'License Overview Link',
      'description' => '(Imaginary) Creates a link to the associated License Overview URL. Use only for License taxonomy references.',
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}


/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function imaginary_misc_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  return taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}


/**
 * Implements hook_field_formatter_view().
 */
function imaginary_misc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $language = i18n_language_interface();

  switch ($display['type']) {
    case 'imaginary_license_overview_link':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
          );
        }
        else {
          $term = $item['taxonomy_term'];

          if(!empty($term->field_license_overview_url)) {
            if(!empty($term->field_license_overview_url[$language->language])) {
              $url = $term->field_license_overview_url[$language->language];
            } else {
              $url = $term->field_license_overview_url[LANGUAGE_NONE];
            }
            $element[$delta] = array(
              '#markup' => l(
                i18n_taxonomy_term_name($term, $language->language),
                $url[0]['url'],
                array('absolute' => TRUE)
              ),
            );
          } else {
            $uri = entity_uri('taxonomy_term', $term);
            $element[$delta] = array(
              '#type' => 'link',
              '#title' => i18n_taxonomy_term_name($term, $language->language),
              '#href' => $uri['path'],
              '#options' => $uri['options'],
            );
          }


        }
      }
      break;
    break;
  }

  return $element;
}