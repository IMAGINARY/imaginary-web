<?php

/**
 * Implements hook_permission().
 */
function imaginary_event_permission() {
  return array(
    'administer imaginary_event settings' => array(
      'title' => t('Administer IMAGINARY Event settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function imaginary_event_menu() {

  $items['events/map'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_imaginary_event_map_page',
    'access callback' => TRUE,
  );

  $items['events/new'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_imaginary_event_new_page',
    'access callback' => TRUE,
  );

  $items['api/events.json'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_imaginary_event_json',
    'access callback' => TRUE,
  );

  $items['admin/config/development/imaginary/event/maps'] = array(
    'title' => 'Event map settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imaginary_event_config'),
    'access arguments' => array('administer imaginary_event settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function imaginary_event_config() {
  $form = array();

  $form['imaginary_event_google_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps API Key'),
    '#default_value' => variable_get('imaginary_event_google_api_key', ''),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Renders a map with Imaginary Event locations
 *
 * @param array $options Rendering options
 * @return string
 */
function imaginary_event_map_render($options = array()) {

  $module_path = drupal_get_path('module', 'imaginary_event');
  $apiKey = variable_get('imaginary_event_google_api_key', '');
  if(empty($apiKey)) {
    drupal_set_message("Google API Key not set. " .
      l("Configure it", 'admin/settings/imaginary/event/maps'));
  }

  drupal_add_js(array('imaginaryEvent' => array(
    'clustererImages' => file_create_url("{$module_path}/img/m"),
  )), 'setting');

  drupal_add_js("https://maps.googleapis.com/maps/api/js?key={$apiKey}&amp;sensor=true", array(
    'scope' => 'footer',
    'requires_jquery' => FALSE,
    'defer' => TRUE,
  ));

  drupal_add_js("{$module_path}/js/markerclusterer.js", array(
    'scope' => 'footer',
    'requires_jquery' => FALSE,
    'defer' => TRUE,
  ));

  drupal_add_js("{$module_path}/js/imaginary_event.js", array(
    'scope' => 'footer',
    'requires_jquery' => TRUE,
    'defer' => TRUE,
  ));


  drupal_add_js(array('api' => array(
    'events' => url("/api/events.json")
  )), 'setting');

  $output = array();

  $output['map'] = array(
    '#markup' => "<div class='imaginary_event-map'></div>",
  );

  return $output;
}

/**
 * JSON output handler that returns event data
 */
function _imaginary_event_json() {

  global $language;

  $cid = "api.events.{$language->language}";

  if($cached = cache_get($cid, 'cache_page'))  {
    $output = $cached->data;
  }
  if(empty($output)) {
    $output = _imaginary_event_json_build();
    cache_set($cid, $output,'cache_page', CACHE_TEMPORARY);
  }

  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  print str_replace('\\/', '/', json_encode($output, JSON_PRETTY_PRINT));
  exit;
}

function _imaginary_event_json_build() {

  $output = array(
    'events' => array(),
  );

  $nodes = node_load_multiple(array(), array(
    'type' => 'event',
    'status' => 1,
  ));

  $countries = countries_get_countries();

  foreach($nodes as $node) {
    $time_place_id = field_get_items('node', $node, 'field_time_place');
    $time_place = field_collection_item_load($time_place_id[0]['value']);
    $coordinates = field_get_items('field_collection_item', $time_place, 'field_event_coordinates');
    $venue = field_get_items('field_collection_item', $time_place, 'field_event_venue');
    $date = field_get_items('field_collection_item', $time_place, 'field_event_date');
    $permanent = field_get_items('field_collection_item', $time_place, 'field_permanent_event_');
    $images_id = field_get_items('node', $node, 'field_image_collection');
    if(count($images_id)) {
      $image_coll = field_collection_item_load($images_id[0]['value']);
      $image = field_get_items('field_collection_item', $image_coll, 'field_image');
      $thumbnail = image_style_url('slideshow_630_cropped', $image[0]['uri']);
    } else {
      $thumbnail = null;
    }
    $event = array(
      'country' => $countries[$venue[0]['country']]->name,
      'city' => $venue[0]['locality'],
      'dateFrom' => $date[0]['value'],
      'dateTo' => $date[0]['value2'],
      'permanent' => $permanent[0]['value'] !== "0",
      'lat' => $coordinates[0]['lat'],
      'lon' => $coordinates[0]['lon'],
      'title' => $node->title,
      'url' => url("node/{$node->nid}", array('absolute' => TRUE)),
    );
    if($thumbnail !== null) {
      $event['thumbnail'] = $thumbnail;
    }
    $output['events'][] = $event;
  }

  function sortByDate($a, $b) {
    return strcmp($a['dateFrom'], $b['dateFrom']);
  }

  usort($output['events'], 'sortByDate');

  return $output;
}

/**
 * Event Map page handler
 */
function _imaginary_event_map_page() {

  return drupal_render(imaginary_event_map_render());
}

function _imaginary_event_new_page() {

  $module_path = drupal_get_path('module', 'imaginary_event');

  drupal_add_js("{$module_path}/js/imaginary_event.js", array(
    'scope' => 'footer',
    'requires_jquery' => TRUE,
    'defer' => TRUE,
  ));

  drupal_add_js("{$module_path}/js/vendors.min.js", array(
    'scope' => 'footer',
    'requires_jquery' => TRUE,
    'defer' => TRUE,
  ));

  drupal_add_js("{$module_path}/js/imaginary_event_components.min.js", array(
    'scope' => 'footer',
    'requires_jquery' => TRUE,
    'defer' => TRUE,
  ));

  drupal_add_js(array('api' => array(
    'events' => url("api/events.json")
  )), 'setting');

  $output = array();

  $output['title'] = array(
    '#prefix' => "<h2 id='current' class='large'>",
    '#suffix' => "</h2>",
    '#markup' => t('Events'),
  );

  $output['intro'] = array(
    '#prefix' => "<div class='big-text'><div class='pane-content'>",
    '#suffix' => "</div></div>",
    '#markup' => t("Events are actual exhibitions, workshops, talks, museum installations, conferences, school projects, etc. â€“ everything that really happens and has a concrete date and venue. In the timeline you find all events, further down the ongoing, upcoming and permanent events and a list of all past events.") . "<br><br>",
  );

  $output['current'] = array(
    'title' => array(
      '#prefix' => "<h2 id='current' class='pane-title'>",
      '#suffix' => "</h2>",
      '#markup' => t('Current Events'),
    ),
    'list' => array(
      '#type' => 'container',
      '#attributes' => array(
        'data-component' =>'event-grid',
        'data-category' =>'current',
      ),
      'loader' => array(
        '#markup' => "<div class='loader'></div>",
      ),
    ),
  );

  $output['upcoming'] = array(
    'title' => array(
      '#prefix' => "<h2 id='upcoming' class='pane-title'>",
      '#suffix' => "</h2>",
      '#markup' => t('Upcoming Events'),
    ),
    'list' => array(
      '#type' => 'container',
      '#attributes' => array(
        'data-component' =>'event-grid',
        'data-category' =>'future',
      ),
      'loader' => array(
        '#markup' => "<div class='loader'></div>",
      ),
    ),
  );

  $output['permanent'] = array(
    'title' => array(
      '#prefix' => "<h2 id='permanent' class='pane-title'>",
      '#suffix' => "</h2>",
      '#markup' => t('Permanent Events'),
    ),
    'list' => array(
      '#type' => 'container',
      '#attributes' => array(
        'data-component' =>'event-grid',
        'data-category' =>'permanent',
      ),
      'loader' => array(
        '#markup' => "<div class='loader'></div>",
      ),
    ),
  );

  $output['all'] = array(
    'title' => array(
      '#prefix' => "<h2 id='past' class='pane-title'>",
      '#suffix' => "</h2>",
      '#markup' => t('All IMAGINARY Events'),
    ),
  );

  $output['all']['events_by_year'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'data-component' =>'year-grouped-event-list',
    ),
    'loader' => array(
      '#markup' => "<div class='loader'></div>",
    ),
  );

  $output['all']['map'] = array(
    'content' => imaginary_event_map_render($options = array()),
  );

  $output['all']['events_by_country'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'data-component' =>'country-grouped-event-list',
    ),
    'loader' => array(
      '#markup' => "<div class='loader'></div>",
    ),
  );


  return $output;
}

function imaginary_event_render_teaser($node) {

  $url = url("node/{$node->nid}");

  $countries = countries_get_countries();

  $time_place_id = field_get_items('node', $node, 'field_time_place');
  $time_place = field_collection_item_load($time_place_id[0]['value']);
  $venue = field_get_items('field_collection_item', $time_place, 'field_event_venue');
  $date = field_get_items('field_collection_item', $time_place, 'field_event_date');
  $permanent = field_get_items('field_collection_item', $time_place, 'field_permanent_event_');

  $country = $countries[$venue[0]['country']]->name;
  $city = $venue[0]['locality'];

  $dateFrom = $date[0]['value'];
  $dateTo = $date[0]['value2'];
  $isPermanent = $permanent[0]['value'];

  if($isPermanent) {
    $dateInfo = t("Since @date", array(
      '@date' => ''
    ));
  } else {
    $dateInfo = t("@dateFrom to @dateTo", array(
      '@dateFrom' => '',
      '@dateTo' => '',
    ));
  }

  $output = array(
    '#prefix' => "<a class='im-event-teaser' href='{$url}'>",
    '#suffix' => '</a>',
  );

  $output['thumbnail'] = array(
    '#prefix' => "<div class='im-event-thumbnail'>",
    '#suffix' => "</div>",
    '#markup' => '',
    '#weight' => 100,
  );

  $output['location'] = array(
    '#prefix' => "<div class='im-event-location'>",
    '#suffix' => "</div>",
    '#markup' => join(', ', array_filter(array($country, $city))),
    '#weight' => 200,
  );

  $output['name'] = array(
    '#prefix' => "<div class='im-event-name'>",
    '#suffix' => "</div>",
    '#markup' => check_plain($node->title),
    '#weight' => 300,
  );

  $output['date'] = array(
    '#prefix' => "<div class='im-event-date'>",
    '#suffix' => "</div>",
    '#markup' => '',
    '#weight' => 400,
  );

  return $output;
}